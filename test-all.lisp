;; helper function.  raises error if actual is not equal to expected
(defun assert-actual (actual expected)
   (if (equalp actual expected)
       (format t "test passed!~%")
        (progn 
           (format t "TEST FAILED! actual:~S" actual)
           (error "TEST FAILED!! Expected Value was ~S but actual was ~S" expected actual)
        )
    )
)


;; helper function.  raises an error if calling fn does not result in an error being raised.
(defun assert-error-thrown (arg1 arg2 fn)
   (format t "calling ~S with arg1:~S, arg2:~S. expecting error to be raised..." fn arg1 arg2)
   (handler-case 
      (progn
         (funcall fn arg1 arg2)
         (error "TEST FAILED! Failed to catch error with args ~S, ~S~%" arg1 arg2)
      )
      (error (err) (format t "Caught error:~S, as expected.~%" err))
   )
)

;;helper function.  calls the function being tested with 2 args.  Raises error if the actual value is not equal to the expected value.
(defun error-if-failed2(arg1 arg2 expected fn)
  (progn
     (format t "calling ~S with arg1:~S, arg2:~S, expecting:~S..." fn arg1 arg2 expected)
     (let ((actual (funcall fn arg1 arg2)))
        (assert-actual actual expected)
     )
  )
)

;; helper function.  calls the function being tested with 1 arg.  Raises error if the actual value is not equal to the expected value.
(defun error-if-failed1(arg1 expected fn)
  (progn
     (format t "calling ~S with arg: ~S, expecting ~S...." fn arg1 expected)
     (let ((actual (funcall fn arg1)))
        (assert-actual actual expected)
     )
  )
)

;;helper function.  calls the function being tested with 3 args.  Raises error if the actual value is not equal to the expected value.
(defun error-if-failed3 (arg1 arg2 arg3 expected fn)
  (progn
     (format t "calling ~S with arg1:~S, arg2:~S, arg3:~S, expecting:~S..." fn arg1 arg2 arg3 expected)
     (let ((actual (funcall fn arg1 arg2 arg3)))
        (assert-actual actual expected)
     )
  )
)

;;helper function.  calls the function being tested with 4 args.  Raises error if the actual value is not equal to the expected value.
(defun error-if-failed4 (arg1 arg2 arg3 arg4 expected fn)
  (progn
     (format t "calling ~S with arg1:~S, arg2:~S, arg3:~S, arg4~S, expecting:~S..." fn arg1 arg2 arg3 arg4 expected)
     (let ((actual (funcall fn arg1 arg2 arg3 arg4)))
        (assert-actual actual expected)
     )
  )
)

;; these are the test cases for functionatom.
(defun test-functionatom()
  (progn (format t "Initiating tests for ~S...~%" #'functionatom) 
         (error-if-failed1 () () #'functionatom)
         (error-if-failed1 '(1) '(1) #'functionatom)
         (error-if-failed1 '((1)) '(1) #'functionatom)
         (error-if-failed1 '(1 2) '(1 2) #'functionatom)
         (error-if-failed1 '((1) 2) '(1 2) #'functionatom)
         (error-if-failed1 '(1 (2)) '(1 2) #'functionatom)
         (error-if-failed1 '(1 2 3) '(1 2 3) #'functionatom)
         (error-if-failed1 '(1 (2) 3) '(1 2 3) #'functionatom)
         (error-if-failed1 '((1) (2) (3)) '(1 2 3) #'functionatom)
         (error-if-failed1 '(1 ((((2))) 3)) '(1 2 3) #'functionatom)
         (error-if-failed1 '(1 (2 (3))) '(1 2 3) #'functionatom)
         (error-if-failed1 '(1 (2 (3)) 4) '(1 2 3 4) #'functionatom)
         (error-if-failed1 '(1 (2 (3)) 4 (5)) '(1 2 3 4 5) #'functionatom)
         (error-if-failed1 '(1 (2 3) (((4) 5 6))) '(1 2 3 4 5 6) #'functionatom)
         (error-if-failed1 '(1 2 3 4 5 (6)) '(1 2 3 4 5 6) #'functionatom)
         (format t "All ~S tests completed.~%" #'functionatom)
   )
)

;; these are the test cases for functionatom.
(defun test-replaceword()
  (progn (format t "Initiating tests for ~S...~%" #'replaceword) 
         (assert-error-thrown () () #'replaceword)
         (assert-error-thrown 'a 'a  #'replaceword)
         (assert-error-thrown 0 ()  #'replaceword)
         (assert-error-thrown 'a 0  #'replaceword)
         (error-if-failed2 'a () () #'replaceword)
         (error-if-failed2 'a '(a) '(YYYY) #'replaceword)
         (error-if-failed2 'a '(b) '(b) #'replaceword)
         (error-if-failed2 'a '((b)) '((b)) #'replaceword)
         (error-if-failed2 'a '(b a) '(b YYYY) #'replaceword)
         (error-if-failed2 'a '(a b) '(YYYY b) #'replaceword)
         (error-if-failed2 'a '(b a c) '(b YYYY c) #'replaceword)
         (error-if-failed2 'nikos '(i am nikos) '(i am yyyy) #'replaceword)
         (error-if-failed2 'nomatch '(i don\'t always write code\, but when i do\, i write tests) '(i don\'t always write code\, but when i do\, i write tests) #'replaceword)
         (error-if-failed2 'a '(x 0 z) '(x 0 z) #'replaceword)
         (error-if-failed2 'a '(((((a b c))))) '(((((a b c))))) #'replaceword)
         (format t "All ~S tests completed.~%" #'replaceword)
    )
)

(defun test-is-legal()
  (progn (format t "Initiating tests for ~S...~%" #'is-legal) 
       (error-if-failed2 0 0 T #'is-legal)
       (error-if-failed2 0 2 T #'is-legal)
       (error-if-failed2 2 0 T #'is-legal)
       (error-if-failed2 2 2 T #'is-legal)
       (error-if-failed2 0 -1 nil #'is-legal)
       (error-if-failed2 -1 2 nil #'is-legal)
       (error-if-failed2 1 3 nil #'is-legal)
       (error-if-failed2 3 1 nil #'is-legal)
       (format t "All ~S tests completed.~%" #'replaceword)
    )
)

(defun test-find-loc()
  (progn (format t "Initiating tests for ~S...~%" #'find-loc) 
       (error-if-failed2 (create-state 1 2 3 4 5 6 7 8 9) 1 (make-location :i 0 :j 0) #'find-loc)
       (error-if-failed2 (create-state 1 2 3 4 5 6 7 8 9) 3 (make-location :i 0 :j 2) #'find-loc)
       (error-if-failed2 (create-state 1 2 3 4 5 6 7 8 9) 4 (make-location :i 1 :j 0) #'find-loc)
       (error-if-failed2 (create-state 1 2 3 4 5 6 7 8 9) 6 (make-location :i 1 :j 2) #'find-loc)
       (error-if-failed2 (create-state 1 2 3 4 5 6 7 8 9) 7 (make-location :i 2 :j 0) #'find-loc)
       (error-if-failed2 (create-state 1 2 3 4 5 6 7 -13 9) -13 (make-location :i 2 :j 1)#'find-loc)
       (error-if-failed2 (create-state 1 2 3 4 5 6 7 8 9) 9 (make-location :i 2 :j 2) #'find-loc)
       (format t "All ~S tests completed.~%" #'find-loc)
    )
)

(defun test-is-legal-move()
  (progn (format t "Initiating tests for ~S...~%" #'is-legal-move) 
       ;; TODO: Add tests for invalid input
       (error-if-failed2 (make-location :i 0 :j 0) (make-location :i 0 :j 1) t #'is-legal-move)
       (error-if-failed2 (make-location :i 0 :j 0) (make-location :i 1 :j 0) t #'is-legal-move)
       (error-if-failed2 (make-location :i 2 :j 2) (make-location :i 2 :j 1) t #'is-legal-move)
       (error-if-failed2 (make-location :i 1 :j 1) (make-location :i 2 :j 1) t #'is-legal-move)
       (error-if-failed2 (make-location :i 0 :j 0) (make-location :i 1 :j 1) nil #'is-legal-move)
       (error-if-failed2 (make-location :i 1 :j 1) (make-location :i 0 :j 0) nil #'is-legal-move)
       (error-if-failed2 (make-location :i 0 :j 0) (make-location :i 2 :j 0) nil #'is-legal-move)
       (error-if-failed2 (make-location :i 0 :j 2) (make-location :i 0 :j 2) nil #'is-legal-move)
       (error-if-failed2 (make-location :i 2 :j 0) (make-location :i 0 :j 0) nil #'is-legal-move)
       (error-if-failed2 (make-location :i 1 :j 1) (make-location :i 2 :j 0) nil #'is-legal-move)
       (error-if-failed2 (make-location :i 0 :j 0) (make-location :i 2 :j 2) nil #'is-legal-move)
       (assert-error-thrown () () #'is-legal-move)
       (assert-error-thrown '(0 0) '(0 1) #'is-legal-move)
       (format t "All ~S tests completed.~%" #'is-legal-move)
    )
)

(defun test-move()
  (progn (format t "Initiating tests for ~S...~%" #'move) 
       ;; TODO: Add tests for invalid input
       (error-if-failed2 (create-state 1 2 3 4 5 6 7 8 *blank-square*) (make-location :i 2 :j 1) (create-state 1 2 3 4 5 6 7 *blank-square* 8) #'move)
       (error-if-failed2 (create-state 1 2 3 4 *blank-square* 6 7 8 5) (make-location :i 0 :j 1) (create-state 1 *blank-square* 3 4 2 6 7 8 5) #'move)
       (error-if-failed2 (create-state 1 *blank-square* 2 3 4 5 6 7 8) (make-location :i 0 :j 0) (create-state *blank-square* 1 2 3 4 5 6 7 8) #'move)
       (error-if-failed2 (create-state 1 2 *blank-square* 3 4 5 6 7 8) (make-location :i 1 :j 2) (create-state 1 2 5 3 4 *blank-square* 6 7 8) #'move)
       (error-if-failed2 (create-state 1 *blank-square* 2 3 4 5 6 7 8) (make-location :i 1 :j 0) nil  #'move)
       (error-if-failed2 (create-state 1 2 *blank-square* 3 4 5 6 7 8) (make-location :i 0 :j 0) nil  #'move)
       (error-if-failed2 (create-state 1 2 3 4 *blank-square* 5 6 7 8) (make-location :i 2 :j 2) nil  #'move)
       (error-if-failed2 (create-state 1 2 3 4 5 6 7 8 *blank-square*) (make-location :i 2 :j 3) nil  #'move)
       (error-if-failed2 (create-state *blank-square* 1 2 3 4 5 6 7 8) (make-location :i -1 :j 0) nil  #'move)
       (format t "All ~S tests completed.~%" #'move)
    )
)

(defun test-generate-child-states()
  (progn (format t "Initiating tests for ~S...~%" #'generate-child-states) 
       ;; TODO: Add tests for invalid input
       (error-if-failed1 (create-state 1 2 3 4 *blank-square* 5 6 7 8) (list (create-state 1 *blank-square* 3 4 2 5 6 7 8)
                                                                             (create-state 1 2 3 4 7 5 6 *blank-square* 8) 
                                                                             (create-state 1 2 3 4 5 *blank-square* 6 7 8)
                                                                             (create-state 1 2 3 *blank-square* 4 5 6 7 8)) #'generate-child-states)
       (error-if-failed1 (create-state *blank-square* 8 7 6 5 4 3 2 1) (list (create-state 6 8 7 *blank-square* 5 4 3 2 1) 
                                                                             (create-state 8 *blank-square* 7 6 5 4 3 2 1)) #'generate-child-states)
       (error-if-failed1 (create-state 8 *blank-square* 7 6 5 4 3 2 1) (list (create-state 8 5 7 6 *blank-square* 4 3 2 1) 
                                                                             (create-state 8 7 *blank-square* 6 5 4 3 2 1)
                                                                             (create-state *blank-square* 8 7 6 5 4 3 2 1)) #'generate-child-states)
       (error-if-failed1 (create-state 8 7 *blank-square* 6 5 4 3 2 1) (list (create-state 8 7 4 6 5 *blank-square* 3 2 1) 
                                                                             (create-state 8 *blank-square* 7 6 5 4 3 2 1)) #'generate-child-states)
       (error-if-failed1 (create-state 8 7 6 5 4 3 2 1 *blank-square*) (list (create-state 8 7 6 5 4 *blank-square* 2 1 3) 
                                                                             (create-state 8 7 6 5 4 3 2 *blank-square* 1)) #'generate-child-states)
       (error-if-failed1 (create-state 8 7 6 *blank-square* 5 4 3 2 1) (list (create-state *blank-square* 7 6 8 5 4 3 2 1)
                                                                             (create-state 8 7 6 3 5 4 *blank-square* 2 1) 
                                                                             (create-state 8 7 6 5 *blank-square* 4 3 2 1)) #'generate-child-states)
       (format t "All ~S tests completed.~%" #'generate-child-states)
    )
)

(defun test-man-distance()
  (progn (format t "Initiating tests for ~S...~%" #'man-distance) 
       (error-if-failed4 0 0 (create-state 1 2 3 4 5 6 7 8 9) (create-state 1 2 3 4 5 6 7 8 9) 0 #'man-distance)
       (error-if-failed4 2 2 (create-state 1 2 3 4 5 6 7 8 9) (create-state 9 2 3 4 5 6 7 8 1) 4 #'man-distance)
       (error-if-failed4 1 2 (create-state 1 2 3 4 5 6 7 8 9) (create-state 1 2 3 6 5 4 7 8 9) 2 #'man-distance)
       (error-if-failed4 2 1 (create-state 1 2 3 4 5 6 7 8 9) (create-state 1 2 3 4 5 6 8 7 9) 1 #'man-distance)
       (format t "All ~S tests completed.~%" #'man-distance)
    )
)

(defun test-heuristic()
   (setq *heuristic-start-state* *default-start-state*)
   (setq *heuristic-goal-state* *goal-state*)

   (progn (format t "Initiating tests for ~S...~%" #'heuristic) 
       (error-if-failed2 nil *goal-state* 0 #'heuristic) ; 4
       (error-if-failed2 nil (create-state 1 2 *blank-square* 4 5 3 7 8 6) 2 #'heuristic) ;6
       (error-if-failed2 nil (create-state 1 2 3 4 *blank-square* 5 7 8 6) 2 #'heuristic) ;4
       (error-if-failed2 nil (create-state *blank-square* 2 4 6 8 1 3 5 7) 16 #'heuristic);34
       (format t "All ~S tests completed.~%" #'heuristic)
   )
)

(defun test-create-child-nodes()
   (progn 
       (format t "Initiating tests for ~S...~%" #'create-child-nodes)
       (let ((test-root (create-node nil "ROOT" *default-start-state* nil)))
          (error-if-failed3 test-root #'generate-child-states #'heuristic 
               (list
                   (create-node test-root "1" (create-state 4 1 3 *blank-square* 2 5 7 8 6) (heuristic nil (create-state 4 1 3 *blank-square* 2 5 7 8 6)))
                   (create-node test-root "2" (create-state 1 *blank-square* 3 4 2 5 7 8 6) (heuristic nil (create-state 1 *blank-square* 3 4 2 5 7 8 6)))
               )
              #'create-child-nodes)
       )
       (let ((test-root (create-node nil "ROOT" (create-state 1 2 3 4 5 *blank-square* 7 8 6) nil)))
          (error-if-failed3 test-root #'generate-child-states #'heuristic 
               (list
                   (create-node test-root "1" (create-state 1 2 *blank-square* 4 5 3 7 8 6) (heuristic nil (create-state 1 2 *blank-square* 4 5 3 7 8 6)))
                   (create-node test-root "2" (create-state 1 2 3 4 5 6 7 8 *blank-square*) (heuristic nil (create-state 1 2 3 4 5 6 7 8 *blank-square*)))
                   (create-node test-root "3" (create-state 1 2 3 4 *blank-square* 5 7 8 6) (heuristic nil (create-state 1 2 3 4 *blank-square* 5 7 8 6)))
               )
              #'create-child-nodes)
       )
       (format t "All ~S tests completed.~%" #'create-child-nodes)
   )
)

;; this is the main test driver for all 3 parts to the assignment
(defun test-all()
  (progn (test-functionatom)
         (test-replaceword)
         (test-is-legal)
         (test-find-loc)
         (test-is-legal-move)
         (test-move)
         (test-generate-child-states)
         (test-man-distance)
         (test-heuristic)
         (test-create-child-nodes)
         (puzzle-search)
         "ALL TESTS PASSED!"
  )
)
