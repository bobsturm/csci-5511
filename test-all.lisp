;; helper function.  raises error if actual value returned by maxdepth is not equal to the expected value
(defun error-if-failed(arg expected fn)
  (format t "calling ~S with arg: ~S, expecting ~A...." fn arg expected) 
  (let ((actual (funcall fn arg)))
         (if (equal actual expected)
             (format t "test passed!~%")
             (progn (format t "TEST FAILED! actual:~S" actual)
               (error "TEST FAILED!!!!!")
             )
        )
  )
)

;; these are the test cases for functionatom.
(defun test-functionatom()
  (progn (format t "Initiating tests for ~S...~%" #'functionatom) 
         (error-if-failed () () #'functionatom)
         (error-if-failed '(1) '(1) #'functionatom)
         (error-if-failed '((1)) '(1) #'functionatom)
         (error-if-failed '(1 2) '(1 2) #'functionatom)
         (error-if-failed '((1) 2) '(1 2) #'functionatom)
         (error-if-failed '(1 (2)) '(1 2) #'functionatom)
         (error-if-failed '(1 2 3) '(1 2 3) #'functionatom)
         (error-if-failed '(1 (2) 3) '(1 2 3) #'functionatom)
         (error-if-failed '((1) (2) (3)) '(1 2 3) #'functionatom)
         (error-if-failed '(1 ((((2))) 3)) '(1 2 3) #'functionatom)
         (error-if-failed '(1 (2 (3))) '(1 2 3) #'functionatom)
         (error-if-failed '(1 (2 (3)) 4) '(1 2 3 4) #'functionatom)
         (error-if-failed '(1 (2 (3)) 4 (5)) '(1 2 3 4 5) #'functionatom)
         (error-if-failed '(1 (2 3) (((4) 5 6))) '(1 2 3 4 5 6) #'functionatom)
         (error-if-failed '(1 2 3 4 5 (6)) '(1 2 3 4 5 6) #'functionatom)
         (format t "All functionatom tests completed.")
    )
)

;; this is the main test driver for all 3 parts to the assignment
(defun test-all()
  (progn (test-functionatom)
         "ALL TESTS PASSED!"
  )
)
